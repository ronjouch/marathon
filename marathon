#!/usr/bin/env sh
# shellcheck disable=SC2009
# See documentation, requirements, license in README.md

missingDeps=false
if ! command -v grep > /dev/null; then echo "Missing grep"; missingDeps=true; fi
if ! command -v ps > /dev/null; then echo "Missing ps"; missingDeps=true; fi
if ! command -v awk > /dev/null; then echo "Missing awk"; missingDeps=true; fi
if ! command -v wmctrl > /dev/null; then echo "Missing wmctrl"; missingDeps=true; fi
if ! command -v xdotool > /dev/null; then echo "Missing xdotool"; missingDeps=true; fi
if [ $missingDeps = true ]; then exit 1; fi

toggle=0
ignoreArgsOnFocus=0
cmdForFocus=""
launchClosed=0

while [ "$1" = "--toggle" ] || [ "$1" = "--ignore-args-on-focus" ] || [ "$1" = "--launch-closed" ]; do
  if [ "$1" = "--toggle" ]; then
    shift
    toggle=1
  elif [ "$1" = "--ignore-args-on-focus" ]; then
    shift
    ignoreArgsOnFocus=1
  elif [ "$1" = "--launch-closed" ]; then
    shift
    launchClosed=1
  fi
done

cmd="$*"
if [ "$ignoreArgsOnFocus" = "1" ]; then
  cmdForFocus="$1"
else
  cmdForFocus="$*"
fi

runningInstancesOfExec=''

if [ "$launchClosed" = "1" ]; then
  runningInstancesOfExec=$(wmctrl -l -x |
                           awk '{print $3}' |
                           grep -c -i "$cmdForFocus");
else
  # Final grep "linestart OR /" in order to find "code" and "/usr/share/code/code"
  # but NOT "google-chrome --disable-accelerated-video-decode"
  runningInstancesOfExec=$(ps -a -x -o command |
                           grep -v grep |
                           grep -v defunct |
                           grep -v marathon |
                           grep -c -e "\\(^\\|\\/\\)$cmdForFocus");
fi

# zenity --info --text "$runningInstancesOfExec"; # useful for debug

if [ "$runningInstancesOfExec" -gt "0" ]; then
  if [ "$toggle" = "1" ]; then
    # Determine active windowID, see https://github.com/dmikalova/brocket and
    # http://superuser.com/questions/382616/detecting-currently-active-window
    currentWindow="$(printf '0x%08x\n' "$(xprop -root |
                     grep "_NET_ACTIVE_WINDOW(WINDOW)" |
                     grep -E -o '0x[0-9a-f]+')")"

    currentWindowIsCommand="$(wmctrl -l -x |
                              grep "$currentWindow" |
                              grep -c -i "^0x[0-9a-f]*\\s*[0-9]\\s*[^ ]*$cmdForFocus")"
    if [ "$currentWindowIsCommand" -gt 0 ]; then
      exec xdotool windowminimize "$currentWindow"
    else
      # Try to find our command in both places (useful for some programs)
      wmctrl -x -a "$cmdForFocus" || wmctrl -a "$cmdForFocus";
    fi
  else
    wmctrl -x -a "$cmdForFocus" || wmctrl -a "$cmdForFocus";
  fi
else
  $cmd >/dev/null 2>&1 &
fi
